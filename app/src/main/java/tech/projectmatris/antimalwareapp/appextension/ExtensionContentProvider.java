package tech.projectmatris.antimalwareapp.appextension;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.util.List;
import java.util.Locale;

import tech.projectmatris.antimalwareapp.activities.MainActivity;
import tech.projectmatris.antimalwareapp.activities.ScanActivity;

import static tech.projectmatris.antimalwareapp.appextension.ExtensionUtils.KEY_WORK_STATUS;

public class ExtensionContentProvider extends ContentProvider {

    private String currentState = AppExtensionState.STOP.getId();

    @Nullable
    @Override
    public Bundle call(@NonNull String method, @Nullable String arg, @Nullable Bundle extras) {
        String lowerCaseMethod = method.toLowerCase(Locale.ENGLISH);
        if (lowerCaseMethod.equals(AppExtensionWorkType.Start.getId())) {
            Context context = getContext();
            if (context != null) {
                Intent startIntent = new Intent(context, ScanActivity.class);
                startIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(startIntent);
            }
            return null;
        } else if (lowerCaseMethod.equals(AppExtensionWorkType.Open.getId())) {
            Context context = getContext();
            if (context != null) {
                Intent startIntent = new Intent(context, MainActivity.class);
                startIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(startIntent);
            }
            return null;
        } else if (lowerCaseMethod.equals(AppExtensionWorkType.GetStatus.getId())) {
            Bundle bundle = new Bundle();
            bundle.putString(KEY_WORK_STATUS, currentState);
            return bundle;
        } else if (lowerCaseMethod.equals(AppExtensionWorkType.GetPermissionsRequired.getId())) {
            Bundle bundle = new Bundle();
            bundle.putBoolean(ExtensionUtils.KEY_RESULT, false);
            return bundle;
        } else {
            return super.call(method, arg, extras);
        }
    }

    @Override
    public boolean onCreate() {
        return true;
    }

    @Nullable
    @Override
    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
        List<String> segments = uri.getPathSegments();
        if (segments.size() > 1 && segments.get(0).equals(KEY_WORK_STATUS)) {
            currentState = segments.get(1);
        }
        ContentResolver contentResolver = getContext().getContentResolver();
        if (contentResolver != null) contentResolver.notifyChange(uri, null);
        return uri;
    }

    @Nullable
    @Override
    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
        return null;
    }

    @Nullable
    @Override
    public String getType(@NonNull Uri uri) {
        return null;
    }

    @Override
    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }

    @Override
    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }
}