/*
 * Full Antivirus - Full Antivirus for Android using machine learning
 * Copyright (C) 2020 Project Matris
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package tech.projectmatris.antimalwareapp.activities;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

import io.reactivex.Single;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.schedulers.Schedulers;
import tech.projectmatris.antimalwareapp.R;
import tech.projectmatris.antimalwareapp.appextension.AppExtensionState;
import tech.projectmatris.antimalwareapp.appextension.ExtensionUtils;
import tech.projectmatris.antimalwareapp.data.AppInfo;
import tech.projectmatris.antimalwareapp.scanners.ScanProgressInfo;
import tech.projectmatris.antimalwareapp.scanners.ScanTaskInteractor;

public class ScanActivity extends AppCompatActivity {

    ProgressBar progressBar;
    Button stopButton;
    TextView percentCompletedTextView;
    TextView statusText;
    TextView secondaryStatusText;

    private ScanTaskInteractor scanner = null;

    private void onScanStarted() {
        int installedAppsCount = getApplicationContext().getPackageManager().getInstalledApplications(0).size();
        progressBar.setMax(installedAppsCount);
    }

    private void onScanProgress(ScanProgressInfo scanProgressInfo) {
        statusText.post(() -> {
            statusText.setText(scanProgressInfo.getStatus());
            secondaryStatusText.setText(scanProgressInfo.getSecondaryStatus());
            percentCompletedTextView.setText(String.format("%d%%", scanProgressInfo.getPercentCompleted(), Locale.getDefault()));
            progressBar.setProgress(scanProgressInfo.getProgress());
        });
    }

    private void onScanFinished(ArrayList<AppInfo> scannedApps) {
        Log.d("TestB", "onScanFinished " + scannedApps.size());
        ResultActivity.apps = scannedApps;
        Intent resultScreen = new Intent(this, ResultActivity.class);
//        //todo this.activityRef.get().finish();
        this.startActivity(resultScreen);
    }

    private Disposable scannerDisposable = null;

    @SuppressLint("CheckResult")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scan);
        ActionBar actionBar = this.getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(this.getString(R.string.scanning));
        }
        progressBar = findViewById(R.id.progressBar);
        stopButton = findViewById(R.id.stopButton);
        percentCompletedTextView = findViewById(R.id.percentText);
        statusText = findViewById(R.id.statusText);
        secondaryStatusText = findViewById(R.id.secondaryStatusText);

        progressBar.getProgressDrawable().setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);
        progressBar.setProgress(0);

        scanner = new ScanTaskInteractor();
        scanner.setContextReference(new WeakReference<Context>(getApplicationContext()));
        boolean withSysApps = getIntent().getBooleanExtra("withSysApps", false);
        scanner.setWithSysApps(withSysApps);
        // scanner.setOnScanProgressChangedListener(this::onScanProgress);

        scanner
                .getMObservable()
                .distinctUntilChanged()
                .doOnNext(this::onScanProgress)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
                .subscribe();

        scannerDisposable = scanner
                .scan()
                .doOnSuccess(this::onScanFinished)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(a -> onScanStarted())
                .subscribe();

        stopButton.setOnClickListener(view -> {
            scanner.cancelScanNotification();
            scannerDisposable.dispose();
            updateStatus();
            finish();
        });
    }

    @Override
    protected void onDestroy() {
        if (scanner != null) {
            scanner.cancelScanNotification();
            scannerDisposable.dispose();
        }
        super.onDestroy();
    }

    @Override
    public void onBackPressed() {
        //Back button is disabled while scanning
    }

    private void updateStatus() {
        Uri uri = ExtensionUtils.getContentUri(AppExtensionState.STOP.getId());
        getContentResolver().insert(uri, null);
    }
}