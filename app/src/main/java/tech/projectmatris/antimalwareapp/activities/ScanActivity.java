package tech.projectmatris.antimalwareapp.activities;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.net.Uri;
import android.os.Bundle;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Locale;

import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.schedulers.Schedulers;
import tech.projectmatris.antimalwareapp.R;
import tech.projectmatris.antimalwareapp.appextension.AppExtensionState;
import tech.projectmatris.antimalwareapp.appextension.ExtensionUtils;
import tech.projectmatris.antimalwareapp.data.AppInfo;
import tech.projectmatris.antimalwareapp.scanners.ScanProgressInfo;
import tech.projectmatris.antimalwareapp.scanners.ScannerTask;
import tech.projectmatris.antimalwareapp.scanners.ScannerTaskConstants;

public class ScanActivity extends AppCompatActivity {

    ProgressBar progressBar;
    Button stopButton;
    TextView percentCompletedTextView;
    TextView statusText;
    TextView secondaryStatusText;

    private ScannerTask scannerTask = null;
    private Disposable scannerDisposable = null;

    @SuppressLint("CheckResult")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scan);
        ActionBar actionBar = this.getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(this.getString(R.string.scanning));
        }
        progressBar = findViewById(R.id.progressBar);
        stopButton = findViewById(R.id.stopButton);
        percentCompletedTextView = findViewById(R.id.percentText);
        statusText = findViewById(R.id.statusText);
        secondaryStatusText = findViewById(R.id.secondaryStatusText);

        progressBar.getProgressDrawable().setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);
        progressBar.setProgress(0);

        scannerTask = new ScannerTask();
        scannerTask.setContextReference(new WeakReference<Context>(getApplicationContext()));
        boolean withSysApps = getIntent().getBooleanExtra(ScannerTaskConstants.FLAG_WITH_SYSTEM_APPS, false);
        scannerTask.setWithSysApps(withSysApps);

        scannerTask
                .getScanProgressObservable()
                .distinctUntilChanged()
                .doOnNext(this::onScanProgress)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
                .subscribe();

        scannerDisposable = scannerTask
                .scan()
                .doOnSuccess(this::onScanFinished)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
                .doOnSubscribe(a -> onScanStarted())
                .subscribe();

        stopButton.setOnClickListener(view -> {
            scannerTask.cancelNotifications();
            scannerDisposable.dispose();
            updateStatus();

            Intent intent = new Intent(ScanActivity.this, MainActivity.class);
            startActivity(intent);
        });
    }

    @Override
    protected void onDestroy() {
        if (scannerTask != null) {
            scannerTask.cancelNotifications();
            scannerDisposable.dispose();
        }
        super.onDestroy();
    }

    @Override
    public void onBackPressed() {
        //Back button is disabled while scanning
    }

    private void onScanStarted() {
        int installedAppsCount = getApplicationContext().getPackageManager().getInstalledApplications(0).size();
        progressBar.setMax(installedAppsCount);
    }

    private void onScanProgress(ScanProgressInfo scanProgressInfo) {
        statusText.post(() -> {
            statusText.setText(scanProgressInfo.getStatus());
            secondaryStatusText.setText(scanProgressInfo.getSecondaryStatus());
            percentCompletedTextView.setText(String.format("%d%%", scanProgressInfo.getPercentCompleted(), Locale.getDefault()));
            progressBar.setProgress(scanProgressInfo.getProgress());
        });
    }

    private void onScanFinished(ArrayList<AppInfo> scannedApps) {
        ResultActivity.apps = scannedApps;
        Intent resultScreen = new Intent(this, ResultActivity.class);
        this.startActivity(resultScreen);
    }

    private void updateStatus() {
        Uri uri = ExtensionUtils.getContentUri(AppExtensionState.STOP.getId());
        getContentResolver().insert(uri, null);
    }
}