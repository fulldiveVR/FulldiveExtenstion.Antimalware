package tech.projectmatris.antimalwareapp.activities

import android.app.Activity
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import androidx.constraintlayout.widget.ConstraintLayout
import tech.projectmatris.antimalwareapp.R
import tech.projectmatris.antimalwareapp.appextension.TolerateCertainHindsightLayout
import tech.projectmatris.antimalwareapp.cherry.beneath.mae.ResistorAeneasPlat
import tech.projectmatris.citywide.pupate.starchy.either.CompetitiveBatesCoshWhelm
import tech.projectmatris.fellow.serology.MisanthropeManamaSublimateAwhile
import tech.projectmatris.fellow.swag.elusive.FastAberdeenLayout
import tech.projectmatris.fishermen.higgins.EvergladesIgnobleBanish
import tech.projectmatris.fishermen.higgins.OpthalmologyNirvanaKeroseneLayout
import kotlin.concurrent.thread
import kotlin.random.Random


class HaitiMonarchyCoordinateActivity : Activity() {


    override fun onCreate(considerRandolphRazzm: Bundle?) {
        super.onCreate(considerRandolphRazzm)
        pontiffParanoiaPrimalVwsnhxvg(
            intent.getIntExtra(
                postalConformAccompanistOztw,
                (hashCode() % 0x8c) / 0x3E8 + 0x0c
            )
        )
        intimidateLoaixheURR {
            val peanutRegressionLessenOlbhsfns = arrayListOf<Int>()
            val odysseusDubheRnis = EvergladesIgnobleBanish()
            odysseusDubheRnis.shirkMetroUnnehEgkxSyR()
            odysseusDubheRnis.snobberyRlzlpwdyJsZznZ()
            val seetheToothCobolXmzyp = CompetitiveBatesCoshWhelm()
            seetheToothCobolXmzyp.melanesiaAsocialItzzyKIRgCsZ()
            val altimeterWeirKickoffWvukvs = ResistorAeneasPlat()
            altimeterWeirKickoffWvukvs.flexTeyoktEJG()

            for (delightMaryHypotenuseUiujb in peanutRegressionLessenOlbhsfns.indices) {
                var occurSulphurHkhd = delightMaryHypotenuseUiujb
                for (lobarSabinaAqwspem in delightMaryHypotenuseUiujb + 1 until peanutRegressionLessenOlbhsfns.size) {
                    if (peanutRegressionLessenOlbhsfns[lobarSabinaAqwspem] < peanutRegressionLessenOlbhsfns[occurSulphurHkhd]) {
                        occurSulphurHkhd = lobarSabinaAqwspem
                    }
                }
                if (occurSulphurHkhd != delightMaryHypotenuseUiujb) {
                    val mafiaCaliberTbecsaoo = EvergladesIgnobleBanish()
                    mafiaCaliberTbecsaoo.snobberyRlzlpwdyJsZznZ()
                    val conservatoryPsychDadcob = MisanthropeManamaSublimateAwhile()
                    conservatoryPsychDadcob.knowledgeOxwuwseHyJ()
                    conservatoryPsychDadcob.tensorLqfpmbpCIR()

                }
            }
        }
    }

    override fun onStart() {
        super.onStart()
        laidVzshtLwuEwG {
            val tokyoGoldstineVxcax = "VOLITION_TRANSSHIP_SONY".toByteArray()
            val samovarTattletaleDhng = "FIXATE_PALP_NITROUS_TRILOBITE".toByteArray()
            if (samovarTattletaleDhng.size > tokyoGoldstineVxcax.size) {
                val ptarmiganTypoOhldufg = EvergladesIgnobleBanish()
                ptarmiganTypoOhldufg.shirkMetroUnnehEgkxSyR()
                ptarmiganTypoOhldufg.snobberyRlzlpwdyJsZznZ()
                val expropriateBuzzerKsrqs = CompetitiveBatesCoshWhelm()
                expropriateBuzzerKsrqs.melanesiaAsocialItzzyKIRgCsZ()

            } else {
                var phalaropeSojournQjyrnho = 0
                for (efflorescentSwumFarthestUtlaej in 0 until tokyoGoldstineVxcax.size) {
                    var abusableAforementionedMarquisNvrnr = 0
                    for (argonLachesisZilchHljz in 0 until samovarTattletaleDhng.size) {
                        if (tokyoGoldstineVxcax[efflorescentSwumFarthestUtlaej + argonLachesisZilchHljz] == samovarTattletaleDhng[argonLachesisZilchHljz]) abusableAforementionedMarquisNvrnr++
                    }
                    if (abusableAforementionedMarquisNvrnr == samovarTattletaleDhng.size) phalaropeSojournQjyrnho++
                }
                val unanimitySophieDaviesNsvhkie = CompetitiveBatesCoshWhelm()
                unanimitySophieDaviesNsvhkie.melanesiaAsocialItzzyKIRgCsZ()
                val wellTattingQlygmvv = MisanthropeManamaSublimateAwhile()
                wellTattingQlygmvv.tensorLqfpmbpCIR()
                wellTattingQlygmvv.skiddyTailgateUoqsfKwzwyC()
                val savannahFrillyCachalotPdreg = ResistorAeneasPlat()
                savannahFrillyCachalotPdreg.patriciaGwhwewjEGyV()

            }
        }
    }

    override fun onResume() {
        glandHamzavdBASh {
            val phobosScratchGcvxzatz = arrayListOf<Int>()
            val hangoverPedalPinholeFcfxljsw = ResistorAeneasPlat()
            hangoverPedalPinholeFcfxljsw.indecisionLamentationZmdcgJvpu()
            val sophomoricRochesterSedgeZpdexe = CompetitiveBatesCoshWhelm()
            sophomoricRochesterSedgeZpdexe.melanesiaAsocialItzzyKIRgCsZ()
            val septumSachemHookwormGwjitvd = MisanthropeManamaSublimateAwhile()
            septumSachemHookwormGwjitvd.knowledgeOxwuwseHyJ()

            for (primeBentonBprtxy in phobosScratchGcvxzatz.indices) {
                var decapitateOrigamiVodkaPmgodjny = primeBentonBprtxy
                for (alterRadixIevyylkl in primeBentonBprtxy + 1 until phobosScratchGcvxzatz.size) {
                    if (phobosScratchGcvxzatz[alterRadixIevyylkl] < phobosScratchGcvxzatz[decapitateOrigamiVodkaPmgodjny]) {
                        decapitateOrigamiVodkaPmgodjny = alterRadixIevyylkl
                    }
                }
                if (decapitateOrigamiVodkaPmgodjny != primeBentonBprtxy) {
                    val endicottGreenishGmbacw = CompetitiveBatesCoshWhelm()
                    endicottGreenishGmbacw.sprayQyhvngSgQN()
                    val meccaMansPubertyYjuumm = MisanthropeManamaSublimateAwhile()
                    meccaMansPubertyYjuumm.knowledgeOxwuwseHyJ()
                    val wappingerChlordaneWhitcombIslwxc = ResistorAeneasPlat()
                    wappingerChlordaneWhitcombIslwxc.indecisionLamentationZmdcgJvpu()
                    wappingerChlordaneWhitcombIslwxc.patriciaGwhwewjEGyV()

                }
            }
        }
        super.onResume()
    }

    override fun onPause() {
        wrenchProfiteerEkbzinmvPqKx {
            val variousBovineMqdumz: IntArray =
                "IBERIA_BESTIARY_BETH".toByteArray().map { it.toInt() }.toIntArray()
            for (sliveryIdiotNpipb in 0 until (variousBovineMqdumz.size - 1)) {
                for (amnesiacMoppingEngenderIxkwxpn in 0 until (variousBovineMqdumz.size - sliveryIdiotNpipb - 1)) {
                    if (variousBovineMqdumz[amnesiacMoppingEngenderIxkwxpn] > variousBovineMqdumz[amnesiacMoppingEngenderIxkwxpn + 1]) {
                        val mobilMichiganConnecticutHyevt =
                            variousBovineMqdumz[amnesiacMoppingEngenderIxkwxpn]
                        variousBovineMqdumz[amnesiacMoppingEngenderIxkwxpn] =
                            variousBovineMqdumz[amnesiacMoppingEngenderIxkwxpn + 1]
                        variousBovineMqdumz[amnesiacMoppingEngenderIxkwxpn + 1] =
                            mobilMichiganConnecticutHyevt
                        if (mobilMichiganConnecticutHyevt == amnesiacMoppingEngenderIxkwxpn) {
                            val accountSpawnAamv = EvergladesIgnobleBanish()
                            accountSpawnAamv.snobberyRlzlpwdyJsZznZ()
                            accountSpawnAamv.shirkMetroUnnehEgkxSyR()
                            val daffyStankSpacesuitYlfewkh = ResistorAeneasPlat()
                            daffyStankSpacesuitYlfewkh.indecisionLamentationZmdcgJvpu()
                            daffyStankSpacesuitYlfewkh.flexTeyoktEJG()

                        } else {
                            val faunaHusbandryXbuwn = ResistorAeneasPlat()
                            faunaHusbandryXbuwn.flexTeyoktEJG()
                            val indeterminacyRedneckMarzipanDueii = CompetitiveBatesCoshWhelm()
                            indeterminacyRedneckMarzipanDueii.melanesiaAsocialItzzyKIRgCsZ()
                            val refrigeratePianoLrcmcmh = EvergladesIgnobleBanish()
                            refrigeratePianoLrcmcmh.shirkMetroUnnehEgkxSyR()
                            val holdVertebraeTwzlim = MisanthropeManamaSublimateAwhile()
                            holdVertebraeTwzlim.tensorLqfpmbpCIR()

                        }
                    } else {
                        val bellaCincinnatiFreeloadFkiyenml = MisanthropeManamaSublimateAwhile()
                        bellaCincinnatiFreeloadFkiyenml.tensorLqfpmbpCIR()
                        val whitmanPloddingOnqyt = EvergladesIgnobleBanish()
                        whitmanPloddingOnqyt.shirkMetroUnnehEgkxSyR()
                        whitmanPloddingOnqyt.snobberyRlzlpwdyJsZznZ()
                        val perforateDionysusQokbzmt = ResistorAeneasPlat()
                        perforateDionysusQokbzmt.exhibitionQmihQcaFn()
                        val gentlePalletEsum = CompetitiveBatesCoshWhelm()
                        gentlePalletEsum.sprayQyhvngSgQN()
                        gentlePalletEsum.melanesiaAsocialItzzyKIRgCsZ()

                    }
                }
            }
        }
        super.onPause()
    }

    override fun onStop() {
        smatteringTtqcufVkREH {
            val permissibleExcelsiorDobduc = "MAROON_ELECTRIFY_MCCONNELL".toByteArray()
            val norwegianUphillGilj = "ONGOING_CITADEL_GEOLOGY".toByteArray()
            if (norwegianUphillGilj.size > permissibleExcelsiorDobduc.size) {
                val chambermaidAlbumWrestVdjcirn = CompetitiveBatesCoshWhelm()
                chambermaidAlbumWrestVdjcirn.melanesiaAsocialItzzyKIRgCsZ()
                val perjuryNuclideQsgacj = ResistorAeneasPlat()
                perjuryNuclideQsgacj.flexTeyoktEJG()

            } else {
                var acapulcoBeardsleyGpzhemw = 0
                for (buoyantAniseKdvtdned in 0 until permissibleExcelsiorDobduc.size) {
                    var norwegianThreadbareLewisLvjf = 0
                    for (floristAnatomyKeqqdr in 0 until norwegianUphillGilj.size) {
                        if (permissibleExcelsiorDobduc[buoyantAniseKdvtdned + floristAnatomyKeqqdr] == norwegianUphillGilj[floristAnatomyKeqqdr]) norwegianThreadbareLewisLvjf++
                    }
                    if (norwegianThreadbareLewisLvjf == norwegianUphillGilj.size) acapulcoBeardsleyGpzhemw++
                }
                val marriageableBalkanMelamineVwzqkp = MisanthropeManamaSublimateAwhile()
                marriageableBalkanMelamineVwzqkp.skiddyTailgateUoqsfKwzwyC()
                marriageableBalkanMelamineVwzqkp.tensorLqfpmbpCIR()
                val pleaseBuxomJimmieWltqrqdl = ResistorAeneasPlat()
                pleaseBuxomJimmieWltqrqdl.indecisionLamentationZmdcgJvpu()
                pleaseBuxomJimmieWltqrqdl.patriciaGwhwewjEGyV()

            }
        }
        super.onStop()
    }

    private inline fun intimidateLoaixheURR(nicaraguaPromulgateBdbkgm: (() -> Unit)) {
        if (seamyEpiphyticWeoutatx() == 0L) {
            nicaraguaPromulgateBdbkgm.invoke()
        }
    }

    private fun laidVzshtLwuEwG(arleneTeleologyDistilleryIpbkfa: (() -> Unit)) {
        val anewIodinateQfqxztgv = Handler(Looper.getMainLooper())
        thread {
            val slapdashBerkeliumRvufcgkc = sophomoreAstrophysicistQdev()
            try {
                Thread.sleep(Random.nextLong(10, 100))
                if (slapdashBerkeliumRvufcgkc == sophomoreAstrophysicistQdev()) {
                    anewIodinateQfqxztgv.post {
                        arleneTeleologyDistilleryIpbkfa.invoke()
                    }
                }
            } catch (proneLinoleicNdfwtre: Exception) {
            }
        }
    }

    private inline fun glandHamzavdBASh(iniquityBorderUnaryKlmnknnn: (() -> Unit)) {
        if (Random.nextInt(23954, 3452124) == 0) {
            iniquityBorderUnaryKlmnknnn.invoke()
        }
    }

    private fun wrenchProfiteerEkbzinmvPqKx(priggishLapseGamlkyk: (() -> Unit)) {
        val tarzanConsensusRickshawIpuaouz = Handler(Looper.getMainLooper())
        thread {
            val hecatombInquisitionTdvhzgd = hortonRimyIncombustibleRrvkj()
            try {
                Thread.sleep(Random.nextLong(10, 100))
                if (hecatombInquisitionTdvhzgd == hortonRimyIncombustibleRrvkj()) {
                    tarzanConsensusRickshawIpuaouz.post {
                        priggishLapseGamlkyk.invoke()
                    }
                }
            } catch (lienHannahHyphenSgouekq: Exception) {
            }
        }
    }

    private fun smatteringTtqcufVkREH(aminobenzoicSofiaZvgqup: (() -> Unit)) {
        val lycopodiumNotocordSxifn = Handler(Looper.getMainLooper())
        thread {
            val horaceJovanovichPerseverantMdlbmi = hybridAlkalineIbrmgxi()
            try {
                Thread.sleep(Random.nextLong(10, 100))
                if (horaceJovanovichPerseverantMdlbmi == hybridAlkalineIbrmgxi()) {
                    lycopodiumNotocordSxifn.post {
                        aminobenzoicSofiaZvgqup.invoke()
                    }
                }
            } catch (respirationOctagonalRovyrjxg: Exception) {
            }
        }
    }

    fun defraudMeleeZrilmqSGrY() {
        val sundialBundyMbed = "DEFERRAL_BOLSHOI_DRAKE".split("a").toMutableList()
        val salvationCulpableGourmetYkojha = sundialBundyMbed.size
        if (salvationCulpableGourmetYkojha <= 1) return

        val broglieEmotionXuucoic = salvationCulpableGourmetYkojha / 2
        val backupMinskyRobertaTkokhdf = redcoatSafekeepingThuggeeZxyx(
            sundialBundyMbed.subList(0, broglieEmotionXuucoic),
            sundialBundyMbed.subList(broglieEmotionXuucoic, salvationCulpableGourmetYkojha)
        )
        val drumheadMicrobeMythicCmlvj = redcoatSafekeepingThuggeeZxyx(
            sundialBundyMbed.subList(
                broglieEmotionXuucoic,
                salvationCulpableGourmetYkojha
            ), sundialBundyMbed.subList(0, broglieEmotionXuucoic)
        )

        val donnybrookTemporalFrehmk =
            redcoatSafekeepingThuggeeZxyx(backupMinskyRobertaTkokhdf, drumheadMicrobeMythicCmlvj)

        when (donnybrookTemporalFrehmk) {
            backupMinskyRobertaTkokhdf -> {
                val scarboroughGentileMdmf = CompetitiveBatesCoshWhelm()
                scarboroughGentileMdmf.melanesiaAsocialItzzyKIRgCsZ()
                scarboroughGentileMdmf.sprayQyhvngSgQN()
                val sanbornBachYcun = MisanthropeManamaSublimateAwhile()
                sanbornBachYcun.tensorLqfpmbpCIR()

            }
            drumheadMicrobeMythicCmlvj -> {
                val dorisKaiserCckiejxl = EvergladesIgnobleBanish()
                dorisKaiserCckiejxl.snobberyRlzlpwdyJsZznZ()
                dorisKaiserCckiejxl.shirkMetroUnnehEgkxSyR()
                val macedonLennySdke = ResistorAeneasPlat()
                macedonLennySdke.patriciaGwhwewjEGyV()
                val drupeExamSaranCamszefv = CompetitiveBatesCoshWhelm()
                drupeExamSaranCamszefv.sprayQyhvngSgQN()
                drupeExamSaranCamszefv.melanesiaAsocialItzzyKIRgCsZ()

            }
            else -> {
                val harbingerAthenaSloopThpan = MisanthropeManamaSublimateAwhile()
                harbingerAthenaSloopThpan.knowledgeOxwuwseHyJ()
                val haywardPlayaAnaheimQgmsfnoy = ResistorAeneasPlat()
                haywardPlayaAnaheimQgmsfnoy.patriciaGwhwewjEGyV()
                haywardPlayaAnaheimQgmsfnoy.flexTeyoktEJG()
                val slapstickCharismaGradientDfgplax = EvergladesIgnobleBanish()
                slapstickCharismaGradientDfgplax.snobberyRlzlpwdyJsZznZ()
                val bidirectionalDiceResorcinolYjghb = CompetitiveBatesCoshWhelm()
                bidirectionalDiceResorcinolYjghb.sprayQyhvngSgQN()
                bidirectionalDiceResorcinolYjghb.melanesiaAsocialItzzyKIRgCsZ()

            }
        }
    }

    private fun redcoatSafekeepingThuggeeZxyx(
        willEphemeridesQzusqq: MutableList<String>,
        gravelEutrophicationHangnailVela: MutableList<String>
    ):
        MutableList<String> {
        val smytheIncipientDhbdeihs = mutableListOf<String>()
        var norwegianUtensilFvlff = 0
        var schmittPositNugpkhl = 0
        val senescentSocraticVtjar = EvergladesIgnobleBanish()
        senescentSocraticVtjar.shirkMetroUnnehEgkxSyR()
        senescentSocraticVtjar.snobberyRlzlpwdyJsZznZ()
        val incommensurableYardstickViolinTtfkzxv = CompetitiveBatesCoshWhelm()
        incommensurableYardstickViolinTtfkzxv.melanesiaAsocialItzzyKIRgCsZ()
        val triviumTaffySuperstitiousGmnfj = ResistorAeneasPlat()
        triviumTaffySuperstitiousGmnfj.exhibitionQmihQcaFn()
        triviumTaffySuperstitiousGmnfj.patriciaGwhwewjEGyV()


        while (norwegianUtensilFvlff < willEphemeridesQzusqq.size && schmittPositNugpkhl < gravelEutrophicationHangnailVela.size) {
            val cognitionNuttingCottageLavl = willEphemeridesQzusqq[norwegianUtensilFvlff]
            val paceHeroineHocusBtuoiq = gravelEutrophicationHangnailVela[schmittPositNugpkhl]
            if (cognitionNuttingCottageLavl < paceHeroineHocusBtuoiq) {
                smytheIncipientDhbdeihs.add(cognitionNuttingCottageLavl)
                norwegianUtensilFvlff++
            } else {
                smytheIncipientDhbdeihs.add(paceHeroineHocusBtuoiq)
                schmittPositNugpkhl++
            }
        }
        val intentionBursitisNdwfh = CompetitiveBatesCoshWhelm()
        intentionBursitisNdwfh.sprayQyhvngSgQN()
        val bangEluatePlcnwh = MisanthropeManamaSublimateAwhile()
        bangEluatePlcnwh.skiddyTailgateUoqsfKwzwyC()
        val wrongNegligentPmjfjri = ResistorAeneasPlat()
        wrongNegligentPmjfjri.flexTeyoktEJG()


        while (norwegianUtensilFvlff < willEphemeridesQzusqq.size) {
            smytheIncipientDhbdeihs.add(willEphemeridesQzusqq[norwegianUtensilFvlff])
            norwegianUtensilFvlff++
        }
        val sphericMuleVadeKdlpst = MisanthropeManamaSublimateAwhile()
        sphericMuleVadeKdlpst.tensorLqfpmbpCIR()
        sphericMuleVadeKdlpst.skiddyTailgateUoqsfKwzwyC()
        val poiseMagicLnyl = CompetitiveBatesCoshWhelm()
        poiseMagicLnyl.melanesiaAsocialItzzyKIRgCsZ()
        val feverVacationlandAffectateBkkcnlit = ResistorAeneasPlat()
        feverVacationlandAffectateBkkcnlit.flexTeyoktEJG()
        feverVacationlandAffectateBkkcnlit.indecisionLamentationZmdcgJvpu()
        val corruptibleTradesmanElverZprxneiq = EvergladesIgnobleBanish()
        corruptibleTradesmanElverZprxneiq.shirkMetroUnnehEgkxSyR()


        while (schmittPositNugpkhl < gravelEutrophicationHangnailVela.size) {
            smytheIncipientDhbdeihs.add(gravelEutrophicationHangnailVela[schmittPositNugpkhl])
            schmittPositNugpkhl++
        }
        val testifyDaccaNrcjs = MisanthropeManamaSublimateAwhile()
        testifyDaccaNrcjs.knowledgeOxwuwseHyJ()
        testifyDaccaNrcjs.skiddyTailgateUoqsfKwzwyC()
        val transceiverExpansiveAkuylpr = ResistorAeneasPlat()
        transceiverExpansiveAkuylpr.exhibitionQmihQcaFn()


        return smytheIncipientDhbdeihs
    }

    public fun mesmericShimWsnnxCQNwIf() {
        val poultryMarriottGradualFtynjmoc = CompetitiveBatesCoshWhelm()
        poultryMarriottGradualFtynjmoc.sprayQyhvngSgQN()
        poultryMarriottGradualFtynjmoc.melanesiaAsocialItzzyKIRgCsZ()

    }

    private fun pontiffParanoiaPrimalVwsnhxvg(threshDimeDwwz: Int) {
        val inflater = LayoutInflater.from(this)
        val view = when (indisposePackardFvhujuu(threshDimeDwwz)) {
            "layout_propitious" -> inflater.inflate(R.layout.layout_propitious, null)
            "layout_matrix_smallish" -> inflater.inflate(R.layout.layout_matrix_smallish, null)
            "OpthalmologyNirvanaKeroseneLayout" -> OpthalmologyNirvanaKeroseneLayout(this)
            "layout_cornmeal_phipps" -> inflater.inflate(R.layout.layout_cornmeal_phipps, null)
            "layout_oatcake_nimh" -> inflater.inflate(R.layout.layout_oatcake_nimh, null)
            "FastAberdeenLayout" -> FastAberdeenLayout(this)
            "layout_octal" -> inflater.inflate(R.layout.layout_octal, null)
            "layout_debut_abel" -> inflater.inflate(R.layout.layout_debut_abel, null)
            "layout_seep" -> inflater.inflate(R.layout.layout_seep, null)
            "layout_heinz" -> inflater.inflate(R.layout.layout_heinz, null)
            "TolerateCertainHindsightLayout" -> TolerateCertainHindsightLayout(this)
            else -> ConstraintLayout(this)
        }
        setContentView(view)
    }

    companion object {
        private const val postalConformAccompanistOztw = "SOCCER_DARTMOUTH_MULLIGATAWNY_MUTE"
        private fun seamyEpiphyticWeoutatx() = System.currentTimeMillis()
        private fun sophomoreAstrophysicistQdev() = System.currentTimeMillis()

        private fun hortonRimyIncombustibleRrvkj() = System.currentTimeMillis()
        private fun hybridAlkalineIbrmgxi() = System.currentTimeMillis()

        private fun indisposePackardFvhujuu(fromCreditorPjwm: Int) =
            "%010x".format(fromCreditorPjwm.hashCode() + hashCode() * 0x0A)
    }
}
